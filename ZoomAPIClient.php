<?php

declare(strict_types=1);

/*
 * ZoomAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ZoomAPILib;

use ZoomAPILib\Controllers;

/**
 * ZoomAPILib client class
 */
class ZoomAPIClient implements ConfigurationInterface
{
    private $accounts;
    private $billing;
    private $users;
    private $meetings;
    private $webinars;
    private $groups;
    private $iMGroups;
    private $iMChat;
    private $cloudRecording;
    private $reports;
    private $dashboards;
    private $webhooks;
    private $tSP;
    private $pAC;
    private $devices;
    private $trackingField;

    private $timeout = ConfigurationDefaults::TIMEOUT;
    private $enableRetries = ConfigurationDefaults::ENABLE_RETRIES;
    private $numberOfRetries = ConfigurationDefaults::NUMBER_OF_RETRIES;
    private $retryInterval = ConfigurationDefaults::RETRY_INTERVAL;
    private $backOffFactor = ConfigurationDefaults::BACK_OFF_FACTOR;
    private $maximumRetryWaitTime = ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    private $retryOnTimeout = ConfigurationDefaults::RETRY_ON_TIMEOUT;
    private $httpStatusCodesToRetry = ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    private $httpMethodsToRetry = ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    private $environment = ConfigurationDefaults::ENVIRONMENT;
    private $accessToken = ConfigurationDefaults::ACCESS_TOKEN;
    private $customQueryAuthenticationManager;
    private $authManagers = [];
    private $httpCallback;

    public function __construct(array $configOptions = null)
    {
        if (isset($configOptions['timeout'])) {
            $this->timeout = $configOptions['timeout'];
        }
        if (isset($configOptions['enableRetries'])) {
            $this->enableRetries = $configOptions['enableRetries'];
        }
        if (isset($configOptions['numberOfRetries'])) {
            $this->numberOfRetries = $configOptions['numberOfRetries'];
        }
        if (isset($configOptions['retryInterval'])) {
            $this->retryInterval = $configOptions['retryInterval'];
        }
        if (isset($configOptions['backOffFactor'])) {
            $this->backOffFactor = $configOptions['backOffFactor'];
        }
        if (isset($configOptions['maximumRetryWaitTime'])) {
            $this->maximumRetryWaitTime = $configOptions['maximumRetryWaitTime'];
        }
        if (isset($configOptions['retryOnTimeout'])) {
            $this->retryOnTimeout = $configOptions['retryOnTimeout'];
        }
        if (isset($configOptions['httpStatusCodesToRetry'])) {
            $this->httpStatusCodesToRetry = $configOptions['httpStatusCodesToRetry'];
        }
        if (isset($configOptions['httpMethodsToRetry'])) {
            $this->httpMethodsToRetry = $configOptions['httpMethodsToRetry'];
        }
        if (isset($configOptions['environment'])) {
            $this->environment = $configOptions['environment'];
        }
        if (isset($configOptions['accessToken'])) {
            $this->accessToken = $configOptions['accessToken'];
        }
        if (isset($configOptions['httpCallback'])) {
            $this->httpCallback = $configOptions['httpCallback'];
        }

        $this->customQueryAuthenticationManager = new CustomQueryAuthenticationManager($this->accessToken);
        $this->authManagers['global'] = $this->customQueryAuthenticationManager;
    }

    /**
     * Get the client configuration as an associative array
     */
    public function getConfiguration(): array
    {
        $configMap = [];

        if (isset($this->timeout)) {
            $configMap['timeout'] = $this->timeout;
        }
        if (isset($this->enableRetries)) {
            $configMap['enableRetries'] = $this->enableRetries;
        }
        if (isset($this->numberOfRetries)) {
            $configMap['numberOfRetries'] = $this->numberOfRetries;
        }
        if (isset($this->retryInterval)) {
            $configMap['retryInterval'] = $this->retryInterval;
        }
        if (isset($this->backOffFactor)) {
            $configMap['backOffFactor'] = $this->backOffFactor;
        }
        if (isset($this->maximumRetryWaitTime)) {
            $configMap['maximumRetryWaitTime'] = $this->maximumRetryWaitTime;
        }
        if (isset($this->retryOnTimeout)) {
            $configMap['retryOnTimeout'] = $this->retryOnTimeout;
        }
        if (isset($this->httpStatusCodesToRetry)) {
            $configMap['httpStatusCodesToRetry'] = $this->httpStatusCodesToRetry;
        }
        if (isset($this->httpMethodsToRetry)) {
            $configMap['httpMethodsToRetry'] = $this->httpMethodsToRetry;
        }
        if (isset($this->environment)) {
            $configMap['environment'] = $this->environment;
        }
        if ($this->customQueryAuthenticationManager->getAccessToken() !== null) {
            $configMap['accessToken'] = $this->customQueryAuthenticationManager->getAccessToken();
        }
        if (isset($this->httpCallback)) {
            $configMap['httpCallback'] = $this->httpCallback;
        }

        return $configMap;
    }

    /**
     * Clone this client and override given configuration options
     */
    public function withConfiguration(array $configOptions): self
    {
        return new self(\array_merge($this->getConfiguration(), $configOptions));
    }

    public function getTimeout(): int
    {
        return $this->timeout;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->enableRetries;
    }

    public function getNumberOfRetries(): int
    {
        return $this->numberOfRetries;
    }

    public function getRetryInterval(): float
    {
        return $this->retryInterval;
    }

    public function getBackOffFactor(): float
    {
        return $this->backOffFactor;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->maximumRetryWaitTime;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->retryOnTimeout;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->httpStatusCodesToRetry;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->httpMethodsToRetry;
    }

    public function getEnvironment(): string
    {
        return $this->environment;
    }

    public function getCustomQueryAuthenticationCredentials(): ?CustomQueryAuthenticationCredentials
    {
        return $this->customQueryAuthenticationManager;
    }

    /**
     * Get the base uri for a given server in the current environment
     *
     * @param  string $server Server name
     *
     * @return string         Base URI
     */
    public function getBaseUri(string $server = Server::DEFAULT_): string
    {
        return static::ENVIRONMENT_MAP[$this->environment][$server];
    }

    /**
     * Returns Accounts Controller
     */
    public function getAccountsController(): Controllers\AccountsController
    {
        if ($this->accounts == null) {
            $this->accounts = new Controllers\AccountsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->accounts;
    }

    /**
     * Returns Billing Controller
     */
    public function getBillingController(): Controllers\BillingController
    {
        if ($this->billing == null) {
            $this->billing = new Controllers\BillingController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->billing;
    }

    /**
     * Returns Users Controller
     */
    public function getUsersController(): Controllers\UsersController
    {
        if ($this->users == null) {
            $this->users = new Controllers\UsersController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->users;
    }

    /**
     * Returns Meetings Controller
     */
    public function getMeetingsController(): Controllers\MeetingsController
    {
        if ($this->meetings == null) {
            $this->meetings = new Controllers\MeetingsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->meetings;
    }

    /**
     * Returns Webinars Controller
     */
    public function getWebinarsController(): Controllers\WebinarsController
    {
        if ($this->webinars == null) {
            $this->webinars = new Controllers\WebinarsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->webinars;
    }

    /**
     * Returns Groups Controller
     */
    public function getGroupsController(): Controllers\GroupsController
    {
        if ($this->groups == null) {
            $this->groups = new Controllers\GroupsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->groups;
    }

    /**
     * Returns IM Groups Controller
     */
    public function getIMGroupsController(): Controllers\IMGroupsController
    {
        if ($this->iMGroups == null) {
            $this->iMGroups = new Controllers\IMGroupsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->iMGroups;
    }

    /**
     * Returns IM Chat Controller
     */
    public function getIMChatController(): Controllers\IMChatController
    {
        if ($this->iMChat == null) {
            $this->iMChat = new Controllers\IMChatController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->iMChat;
    }

    /**
     * Returns Cloud Recording Controller
     */
    public function getCloudRecordingController(): Controllers\CloudRecordingController
    {
        if ($this->cloudRecording == null) {
            $this->cloudRecording = new Controllers\CloudRecordingController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->cloudRecording;
    }

    /**
     * Returns Reports Controller
     */
    public function getReportsController(): Controllers\ReportsController
    {
        if ($this->reports == null) {
            $this->reports = new Controllers\ReportsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->reports;
    }

    /**
     * Returns Dashboards Controller
     */
    public function getDashboardsController(): Controllers\DashboardsController
    {
        if ($this->dashboards == null) {
            $this->dashboards = new Controllers\DashboardsController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->dashboards;
    }

    /**
     * Returns Webhooks Controller
     */
    public function getWebhooksController(): Controllers\WebhooksController
    {
        if ($this->webhooks == null) {
            $this->webhooks = new Controllers\WebhooksController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->webhooks;
    }

    /**
     * Returns TSP Controller
     */
    public function getTSPController(): Controllers\TSPController
    {
        if ($this->tSP == null) {
            $this->tSP = new Controllers\TSPController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->tSP;
    }

    /**
     * Returns PAC Controller
     */
    public function getPACController(): Controllers\PACController
    {
        if ($this->pAC == null) {
            $this->pAC = new Controllers\PACController($this, $this->authManagers, $this->httpCallback);
        }
        return $this->pAC;
    }

    /**
     * Returns Devices Controller
     */
    public function getDevicesController(): Controllers\DevicesController
    {
        if ($this->devices == null) {
            $this->devices = new Controllers\DevicesController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->devices;
    }

    /**
     * Returns Tracking Field Controller
     */
    public function getTrackingFieldController(): Controllers\TrackingFieldController
    {
        if ($this->trackingField == null) {
            $this->trackingField = new Controllers\TrackingFieldController(
                $this,
                $this->authManagers,
                $this->httpCallback
            );
        }
        return $this->trackingField;
    }

    /**
     * A map of all baseurls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::DEFAULT_ => 'https://api.zoom.us/v2',
        ],
    ];
}
