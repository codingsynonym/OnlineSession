<?php

declare(strict_types=1);

/*
 * ZoomAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ZoomAPILib\Controllers;

use ZoomAPILib\Exceptions\ApiException;
use ZoomAPILib\ApiHelper;
use ZoomAPILib\ConfigurationInterface;
use ZoomAPILib\Models;
use ZoomAPILib\Utils\DateTimeHelper;
use ZoomAPILib\Http\HttpRequest;
use ZoomAPILib\Http\HttpResponse;
use ZoomAPILib\Http\HttpMethod;
use ZoomAPILib\Http\HttpContext;
use ZoomAPILib\Http\HttpCallBack;
use Unirest\Request;

class DashboardsController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * List live meetings or past meetings for a specified period
     *
     * @param \DateTime $from Start Date
     * @param \DateTime $to End Date
     * @param string|null $type The meeting type
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\DashboardMeetingsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardMeetings(
        \DateTime $from,
        \DateTime $to,
        ?string $type = Models\Type17Enum::LIVE,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\DashboardMeetingsResponse {
        //prepare query string for API call
        $_queryBuilder = '/metrics/meetings';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'from'            => ApiHelper::prepareFields($from),
            'to'              => ApiHelper::prepareFields($to),
            'type'            => (null != $type) ?
                $type : Models\Type17Enum::LIVE,
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'DashboardMeetingsResponse');
    }

    /**
     * Retrieve live or past meetings detail
     *
     * @param string $meetingId The meeting ID or meeting UUID. If given meeting ID, will take the
     *        last meeting instance.
     * @param string|null $type The meeting type
     *
     * @return Models\MeetingMetrics Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardMeetingDetail(
        string $meetingId,
        ?string $type = Models\Type17Enum::LIVE
    ): Models\MeetingMetrics {
        //prepare query string for API call
        $_queryBuilder = '/metrics/meetings/{meetingId}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'meetingId' => $meetingId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'type'      => (null != $type) ?
                $type : Models\Type17Enum::LIVE,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'MeetingMetrics');
    }

    /**
     * Retrieve live or past meetings participants
     *
     * @param string $meetingId The meeting ID or meeting UUID. If given meeting ID, will take the
     *        last meeting instance.
     * @param string|null $type The meeting type
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\DashboardMeetingParticipantsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardMeetingParticipants(
        string $meetingId,
        ?string $type = Models\Type17Enum::LIVE,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\DashboardMeetingParticipantsResponse {
        //prepare query string for API call
        $_queryBuilder = '/metrics/meetings/{meetingId}/participants';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'meetingId'       => $meetingId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'type'            => (null != $type) ?
                $type : Models\Type17Enum::LIVE,
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass(
            $_httpRequest,
            $_httpResponse,
            $response->body,
            'DashboardMeetingParticipantsResponse'
        );
    }

    /**
     * Retrieve live or past meetings participant quality of service
     *
     * @param string $meetingId The meeting ID or meeting UUID. If given meeting ID, will take the
     *        last meeting instance.
     * @param string $participantId Participant ID
     * @param string|null $type The meeting type
     *
     * @return Models\ParticipantQOS Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardMeetingParticipantQOS(
        string $meetingId,
        string $participantId,
        ?string $type = Models\Type20Enum::LIVE
    ): Models\ParticipantQOS {
        //prepare query string for API call
        $_queryBuilder = '/metrics/meetings/{meetingId}/participants/{participantId}/qos';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'meetingId'     => $meetingId,
            'participantId' => $participantId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'type'          => (null != $type) ?
                $type : Models\Type20Enum::LIVE,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ParticipantQOS');
    }

    /**
     * Retrieve list of live or past meetings participants quality of service
     *
     * @param string $meetingId The meeting ID or meeting UUID. If given meeting ID, will take the
     *        last meeting instance.
     * @param string|null $type The meeting type
     * @param int|null $pageSize Number of items returned per page
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\ParticipantQOSList Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardMeetingParticipantsQOS(
        string $meetingId,
        ?string $type = Models\Type20Enum::LIVE,
        ?int $pageSize = 1,
        ?string $nextPageToken = null
    ): Models\ParticipantQOSList {
        //prepare query string for API call
        $_queryBuilder = '/metrics/meetings/{meetingId}/participants/qos';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'meetingId'       => $meetingId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'type'            => (null != $type) ?
                $type : Models\Type20Enum::LIVE,
            'page_size'       => (null != $pageSize) ?
                $pageSize : 1,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ParticipantQOSList');
    }

    /**
     * Retrieve sharing/recording details of live or past meetings participant
     *
     * @param string $meetingId The meeting ID or meeting UUID. If given meeting ID, will take the
     *        last meeting instance.
     * @param string|null $type The meeting type
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\DashboardMeetingParticipantShareResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardMeetingParticipantShare(
        string $meetingId,
        ?string $type = Models\Type20Enum::LIVE,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\DashboardMeetingParticipantShareResponse {
        //prepare query string for API call
        $_queryBuilder = '/metrics/meetings/{meetingId}/participants/sharing';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'meetingId'       => $meetingId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'type'            => (null != $type) ?
                $type : Models\Type20Enum::LIVE,
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass(
            $_httpRequest,
            $_httpResponse,
            $response->body,
            'DashboardMeetingParticipantShareResponse'
        );
    }

    /**
     * List live webinars or past webinars for a specified period
     *
     * @param \DateTime $from Start Date
     * @param \DateTime $to End Date
     * @param string|null $type The webinar type
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\DashboardWebinarsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardWebinars(
        \DateTime $from,
        \DateTime $to,
        ?string $type = Models\Type17Enum::LIVE,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\DashboardWebinarsResponse {
        //prepare query string for API call
        $_queryBuilder = '/metrics/webinars';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'from'            => ApiHelper::prepareFields($from),
            'to'              => ApiHelper::prepareFields($to),
            'type'            => (null != $type) ?
                $type : Models\Type17Enum::LIVE,
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'DashboardWebinarsResponse');
    }

    /**
     * Retrieve live  or past webinars detail
     *
     * @param string $webinarId The webinar ID or webinar UUID. If given webinar ID, will take the
     *        last webinar instance.
     * @param string|null $type The webinar type
     *
     * @return Models\WebinarMetrics Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardWebinarDetail(
        string $webinarId,
        ?string $type = Models\Type20Enum::LIVE
    ): Models\WebinarMetrics {
        //prepare query string for API call
        $_queryBuilder = '/metrics/webinars/{webinarId}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'webinarId' => $webinarId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'type'      => (null != $type) ?
                $type : Models\Type20Enum::LIVE,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'WebinarMetrics');
    }

    /**
     * Retrieve live or past webinar participants
     *
     * @param string $webinarId The webinar ID or webinar UUID. If given webinar ID, will take the
     *        last webinar instance.
     * @param string|null $type The webinar type
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\DashboardWebinarParticipantsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardWebinarParticipants(
        string $webinarId,
        ?string $type = Models\Type20Enum::LIVE,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\DashboardWebinarParticipantsResponse {
        //prepare query string for API call
        $_queryBuilder = '/metrics/webinars/{webinarId}/participants';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'webinarId'       => $webinarId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'type'            => (null != $type) ?
                $type : Models\Type20Enum::LIVE,
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass(
            $_httpRequest,
            $_httpResponse,
            $response->body,
            'DashboardWebinarParticipantsResponse'
        );
    }

    /**
     * Retrieve live or past webinar participant quality of service
     *
     * @param string $webinarId The webinar ID or webinar UUID. If given webinar ID, will take the
     *        last webinar instance.
     * @param string $participantId Participant ID
     * @param string|null $type The webinar type
     *
     * @return Models\ParticipantQOS Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardWebinarParticipantQOS(
        string $webinarId,
        string $participantId,
        ?string $type = Models\Type20Enum::LIVE
    ): Models\ParticipantQOS {
        //prepare query string for API call
        $_queryBuilder = '/metrics/webinars/{webinarId}/participants/{participantId}/qos';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'webinarId'     => $webinarId,
            'participantId' => $participantId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'type'          => (null != $type) ?
                $type : Models\Type20Enum::LIVE,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ParticipantQOS');
    }

    /**
     * Retrieve list of live or past webinar participants quality of service
     *
     * @param string $webinarId The webinar ID or webinar UUID. If given webinar ID, will take the
     *        last webinar instance.
     * @param string|null $type The webinar type
     * @param int|null $pageSize Number of items returned per page
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\ParticipantQOSList Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardWebinarParticipantsQOS(
        string $webinarId,
        ?string $type = Models\Type20Enum::LIVE,
        ?int $pageSize = 1,
        ?string $nextPageToken = null
    ): Models\ParticipantQOSList {
        //prepare query string for API call
        $_queryBuilder = '/metrics/webinars/{webinarId}/participants/qos';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'webinarId'       => $webinarId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'type'            => (null != $type) ?
                $type : Models\Type20Enum::LIVE,
            'page_size'       => (null != $pageSize) ?
                $pageSize : 1,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ParticipantQOSList');
    }

    /**
     * Retrieve sharing/recording details of live or past webinar participant
     *
     * @param string $webinarId The webinar ID or webinar UUID. If given webinar ID, will take the
     *        last webinar instance.
     * @param string|null $type The webinar type
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\DashboardWebinarParticipantShareResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardWebinarParticipantShare(
        string $webinarId,
        ?string $type = Models\Type20Enum::LIVE,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\DashboardWebinarParticipantShareResponse {
        //prepare query string for API call
        $_queryBuilder = '/metrics/webinars/{webinarId}/participants/sharing';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'webinarId'       => $webinarId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'type'            => (null != $type) ?
                $type : Models\Type20Enum::LIVE,
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass(
            $_httpRequest,
            $_httpResponse,
            $response->body,
            'DashboardWebinarParticipantShareResponse'
        );
    }

    /**
     * List all zoom rooms on account
     *
     * @param int|null $pageSize The number of records returned within a single API call
     * @param int|null $pageNumber Current page number of returned records
     *
     * @return Models\ZoomRoomList Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardZoomRooms(?int $pageSize = 30, ?int $pageNumber = 1): Models\ZoomRoomList
    {
        //prepare query string for API call
        $_queryBuilder = '/metrics/zoomrooms';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'page_size'   => (null != $pageSize) ?
                $pageSize : 30,
            'page_number' => (null != $pageNumber) ?
                $pageNumber : 1,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ZoomRoomList');
    }

    /**
     * Retrieve zoom room on account
     *
     * @param string $zoomroomId The Zoom Room ID
     * @param \DateTime $from Start Date
     * @param \DateTime $to End Date
     * @param int|null $pageSize The number of records returned within a single API call
     * @param int|null $pageNumber Current page number of returned records
     *
     * @return Models\DashboardZoomRoomResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardZoomRoom(
        string $zoomroomId,
        \DateTime $from,
        \DateTime $to,
        ?int $pageSize = 30,
        ?int $pageNumber = 1
    ): Models\DashboardZoomRoomResponse {
        //prepare query string for API call
        $_queryBuilder = '/metrics/zoomrooms/{zoomroomId}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'zoomroomId'  => $zoomroomId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'from'        => ApiHelper::prepareFields($from),
            'to'          => ApiHelper::prepareFields($to),
            'page_size'   => (null != $pageSize) ?
                $pageSize : 30,
            'page_number' => (null != $pageNumber) ?
                $pageNumber : 1,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'DashboardZoomRoomResponse');
    }

    /**
     * Get CRC Port usage hour by hour for a specified time period <aside class='notice'>We will report a
     * maximum of one month. For example, if "from" is set to "2017-08-05" and "to" is "2017-10-10" we will
     * adjust "from" to "2017-09-10"</aside>.
     *
     * @param \DateTime $from Start Date
     * @param \DateTime $to End Date
     *
     * @return Models\DashboardCRCResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardCRC(\DateTime $from, \DateTime $to): Models\DashboardCRCResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/metrics/crc';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'from' => ApiHelper::prepareFields($from),
            'to'   => ApiHelper::prepareFields($to),
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'DashboardCRCResponse');
    }

    /**
     * Retrieve metrics of Zoom IM
     *
     * @param \DateTime $from Start Date
     * @param \DateTime $to End Date
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\DashboardIMResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function dashboardIM(
        \DateTime $from,
        \DateTime $to,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\DashboardIMResponse {
        //prepare query string for API call
        $_queryBuilder = '/metrics/im';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'from'            => ApiHelper::prepareFields($from),
            'to'              => ApiHelper::prepareFields($to),
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'DashboardIMResponse');
    }
}
