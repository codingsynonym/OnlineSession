<?php

declare(strict_types=1);

/*
 * ZoomAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ZoomAPILib\Controllers;

use ZoomAPILib\Exceptions\ApiException;
use ZoomAPILib\ApiHelper;
use ZoomAPILib\ConfigurationInterface;
use ZoomAPILib\Models;
use ZoomAPILib\Utils\DateTimeHelper;
use ZoomAPILib\Http\HttpRequest;
use ZoomAPILib\Http\HttpResponse;
use ZoomAPILib\Http\HttpMethod;
use ZoomAPILib\Http\HttpContext;
use ZoomAPILib\Http\HttpCallBack;
use Unirest\Request;

class IMChatController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Retrieve IM Chat sessions for a specified period <aside>This API only supports oauth2.</aside>
     *
     * @param \DateTime $from Start Date
     * @param \DateTime $to End Date
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\ImChatSessionsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function imChatSessions(
        \DateTime $from,
        \DateTime $to,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\ImChatSessionsResponse {
        //prepare query string for API call
        $_queryBuilder = '/im/chat/sessions';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'from'            => ApiHelper::prepareFields($from),
            'to'              => ApiHelper::prepareFields($to),
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ImChatSessionsResponse');
    }

    /**
     * Retrieve IM Chat messages for a specified period <aside>This API only supports oauth2.</aside>
     *
     * @param string $sessionId IM Chat Session ID
     * @param \DateTime $from Start Date
     * @param \DateTime $to End Date
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\ImChatMessagesResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function imChatMessages(
        string $sessionId,
        \DateTime $from,
        \DateTime $to,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\ImChatMessagesResponse {
        //prepare query string for API call
        $_queryBuilder = '/im/chat/sessions/{sessionId}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'sessionId'       => $sessionId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'from'            => ApiHelper::prepareFields($from),
            'to'              => ApiHelper::prepareFields($to),
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ImChatMessagesResponse');
    }
}
