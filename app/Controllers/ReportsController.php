<?php

declare(strict_types=1);

/*
 * ZoomAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ZoomAPILib\Controllers;

use ZoomAPILib\Exceptions\ApiException;
use ZoomAPILib\ApiHelper;
use ZoomAPILib\ConfigurationInterface;
use ZoomAPILib\Models;
use ZoomAPILib\Utils\DateTimeHelper;
use ZoomAPILib\Http\HttpRequest;
use ZoomAPILib\Http\HttpResponse;
use ZoomAPILib\Http\HttpMethod;
use ZoomAPILib\Http\HttpContext;
use ZoomAPILib\Http\HttpCallBack;
use Unirest\Request;

class ReportsController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * Retrieve daily report for one month, can only get daily report for recent 6 months
     *
     * @param int|null $year Year for this report
     * @param int|null $month Month for this report
     *
     * @return Models\ReportDailyResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportDaily(?int $year = null, ?int $month = null): Models\ReportDailyResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/report/daily';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'year'  => $year,
            'month' => $month,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportDailyResponse');
    }

    /**
     * Retrieve active or inactive hosts report for a specified period
     *
     * @param \DateTime $from Start Date
     * @param \DateTime $to End Date
     * @param string|null $type Active hosts or inactive hosts
     * @param int|null $pageSize The number of records returned within a single API call
     * @param int|null $pageNumber Current page number of returned records
     *
     * @return Models\ReportUsersResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportUsers(
        \DateTime $from,
        \DateTime $to,
        ?string $type = null,
        ?int $pageSize = 30,
        ?int $pageNumber = 1
    ): Models\ReportUsersResponse {
        //prepare query string for API call
        $_queryBuilder = '/report/users';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'from'        => ApiHelper::prepareFields($from),
            'to'          => ApiHelper::prepareFields($to),
            'type'        => $type,
            'page_size'   => (null != $pageSize) ?
                $pageSize : 30,
            'page_number' => (null != $pageNumber) ?
                $pageNumber : 1,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportUsersResponse');
    }

    /**
     * Retrieve ended meetings report for a specified period
     *
     * @param string $userId The user ID or email address
     * @param \DateTime $from Start Date
     * @param \DateTime $to End Date
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\ReportMeetingsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportMeetings(
        string $userId,
        \DateTime $from,
        \DateTime $to,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\ReportMeetingsResponse {
        //prepare query string for API call
        $_queryBuilder = '/report/users/{userId}/meetings';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'userId'          => $userId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'from'            => ApiHelper::prepareFields($from),
            'to'              => ApiHelper::prepareFields($to),
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new ApiException('User not found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportMeetingsResponse');
    }

    /**
     * Retrieve ended meeting details report
     *
     * @param string $meetingId The meeting ID or meeting UUID. If given meeting ID, will take the
     *        last meeting instance.
     *
     * @return Models\ReportMeetingDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportMeetingDetails(string $meetingId): Models\ReportMeetingDetailsResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/report/meetings/{meetingId}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'meetingId' => $meetingId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new ApiException('Meeting not found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportMeetingDetailsResponse');
    }

    /**
     * Retrieve ended meeting participants report
     *
     * @param string $meetingId The meeting ID or meeting UUID. If given meeting ID, will take the
     *        last meeting instance.
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\ReportMeetingParticipantsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportMeetingParticipants(
        string $meetingId,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\ReportMeetingParticipantsResponse {
        //prepare query string for API call
        $_queryBuilder = '/report/meetings/{meetingId}/participants';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'meetingId'       => $meetingId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new ApiException('Meeting not found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportMeetingParticipantsResponse');
    }

    /**
     * Retrieve ended meeting polls report
     *
     * @param string $meetingId The meeting ID or meeting UUID. If given meeting ID, will take the
     *        last meeting instance.
     *
     * @return Models\ReportMeetingPollsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportMeetingPolls(string $meetingId): Models\ReportMeetingPollsResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/report/meetings/{meetingId}/polls';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'meetingId' => $meetingId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new ApiException('Meeting not found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportMeetingPollsResponse');
    }

    /**
     * Retrieve ended webinar details report
     *
     * @param string $webinarId The webinar ID or webinar UUID. If given webinar ID, will take the
     *        last webinar instance.
     *
     * @return Models\ReportWebinarDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportWebinarDetails(string $webinarId): Models\ReportWebinarDetailsResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/report/webinars/{webinarId}';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'webinarId' => $webinarId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new ApiException('Webinar not found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportWebinarDetailsResponse');
    }

    /**
     * Retrieve ended webinar participants report
     *
     * @param string $webinarId The webinar ID or webinar UUID. If given webinar ID, will take the
     *        last webinar instance.
     * @param int|null $pageSize The number of records returned within a single API call
     * @param string|null $nextPageToken Next page token is used to paginate through large result
     *        sets. A next page token will be returned whenever the set of available results
     *        exceed the current page size. The expiration period for this token is 15 minutes.
     *
     * @return Models\ReportWebinarParticipantsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportWebinarParticipants(
        string $webinarId,
        ?int $pageSize = 30,
        ?string $nextPageToken = null
    ): Models\ReportWebinarParticipantsResponse {
        //prepare query string for API call
        $_queryBuilder = '/report/webinars/{webinarId}/participants';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'webinarId'       => $webinarId,
        ]);

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'page_size'       => (null != $pageSize) ?
                $pageSize : 30,
            'next_page_token' => $nextPageToken,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new ApiException('Webinar not found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportWebinarParticipantsResponse');
    }

    /**
     * Retrieve ended webinar polls report
     *
     * @param string $webinarId The webinar ID or webinar UUID. If given webinar ID, will take the
     *        last webinar instance.
     *
     * @return Models\ReportWebinarPollsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportWebinarPolls(string $webinarId): Models\ReportWebinarPollsResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/report/webinars/{webinarId}/polls';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'webinarId' => $webinarId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new ApiException('Webinar not found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportWebinarPollsResponse');
    }

    /**
     * Retrieve ended webinar Q&A report
     *
     * @param string $webinarId The webinar ID or webinar UUID. If given webinar ID, will take the
     *        last webinar instance.
     *
     * @return Models\ReportWebinarQAResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportWebinarQA(string $webinarId): Models\ReportWebinarQAResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/report/webinars/{webinarId}/qa';

        //process optional query parameters
        $_queryBuilder = ApiHelper::appendUrlWithTemplateParameters($_queryBuilder, [
            'webinarId' => $webinarId,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new ApiException('Webinar not found', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportWebinarQAResponse');
    }

    /**
     * Retrieve telephone report for a specified period <aside>Toll Report option would be removed.
     * </aside>.
     *
     * @param \DateTime $from Start Date
     * @param \DateTime $to End Date
     * @param int|null $type Audio type
     * @param int|null $pageSize The number of records returned within a single API call
     * @param int|null $pageNumber Current page number of returned records
     *
     * @return Models\ReportTelephoneResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportTelephone(
        \DateTime $from,
        \DateTime $to,
        ?int $type = Models\Type30Enum::ENUM_1,
        ?int $pageSize = 30,
        ?int $pageNumber = 1
    ): Models\ReportTelephoneResponse {
        //prepare query string for API call
        $_queryBuilder = '/report/telephone';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'from'        => ApiHelper::prepareFields($from),
            'to'          => ApiHelper::prepareFields($to),
            'type'        => (null != $type) ?
                $type : Models\Type30Enum::ENUM_1,
            'page_size'   => (null != $pageSize) ?
                $pageSize : 30,
            'page_number' => (null != $pageNumber) ?
                $pageNumber : 1,
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportTelephoneResponse');
    }

    /**
     * Retrieve cloud recording usage report for a specified period. You can only get cloud recording
     * reports for the most recent period of 6 months. The date gap between from and to dates should be
     * smaller or equal to 30 days.
     *
     * @param \DateTime $from Start Date
     * @param \DateTime $to End Date
     *
     * @return Models\ReportCloudRecordingResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reportCloudRecording(\DateTime $from, \DateTime $to): Models\ReportCloudRecordingResponse
    {
        //prepare query string for API call
        $_queryBuilder = '/report/cloud_recording';

        //process optional query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryBuilder, [
            'from' => ApiHelper::prepareFields($from),
            'to'   => ApiHelper::prepareFields($to),
        ]);

        //validate and preprocess url
        $_queryUrl = ApiHelper::cleanUrl($this->config->getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent,
            'Accept'        => 'application/json'
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        // Apply authorization to request
        $this->getAuthManager('global')->apply($_httpRequest);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return ApiHelper::mapClass($_httpRequest, $_httpResponse, $response->body, 'ReportCloudRecordingResponse');
    }
}
